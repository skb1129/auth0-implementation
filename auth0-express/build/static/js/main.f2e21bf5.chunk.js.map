{"version":3,"sources":["Auth.js","App.js","serviceWorker.js","index.js"],"names":["oob_code","mfa_token","auth0instance","auth0","WebAuth","domain","clientID","audience","redirectUri","scope","responseType","enrollMFA","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","response","data","wrap","_context","prev","next","fetch","method","headers","content-type","Authorization","concat","body","JSON","stringify","authenticator_types","oob_channels","phone_number","sent","json","console","log","t0","stop","apply","this","arguments","challengeMFA","_ref2","_callee2","_context2","challenge_type","client_id","fetchPrivateApi","_ref3","_callee3","credentials","_context3","tokenType","accessToken","_x","authenticateMFA","_ref4","_callee4","binding_code","payload","_context4","grant_type","FormData","append","_x2","signin","username","password","client","login","realm","err","authResult","code","original","App","_useState","useState","_useState2","slicedToArray","email","setEmail","_useState3","_useState4","setPassword","_useState5","_useState6","otp","setOtp","react_default","createElement","className","type","value","onChange","e","target","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f2e21bf5.chunk.js","sourcesContent":["import auth0 from 'auth0-js';\n\nlet oob_code = '';\nlet mfa_token = '';\n\nconst auth0instance = new auth0.WebAuth({\n    domain: 'dev-4bulwykj.auth0.com',\n    clientID: 'XXH9skh44KSude1nhCGM74R9TciHylrj',\n    audience: 'http://10.14.2.206:8000',\n    redirectUri: 'http://localhost:8000',\n    scope: 'openid profile email address phone read:profile',\n    responseType: 'token id_token'\n});\n\nconst enrollMFA = async () => {\n    try {\n        const response = await fetch('https://dev-4bulwykj.auth0.com/mfa/associate', {\n            method: 'POST',\n            headers: {\n                'content-type': 'application/json',\n                Authorization: `Bearer ${mfa_token}`,\n            },\n            body: JSON.stringify({\n                authenticator_types: ['oob'],\n                oob_channels: ['sms', 'email'],\n                phone_number: '+919814068029',\n            }),\n        });\n        const data = await response.json();\n        oob_code = data.oob_code;\n        console.log(data);\n    } catch (e) {\n        console.log(e);\n    }\n};\n\nconst challengeMFA = async () => {\n    try {\n        const response = await fetch('https://dev-4bulwykj.auth0.com/mfa/challenge', {\n            method: 'POST',\n            headers: { 'content-type': 'application/json' },\n            body: JSON.stringify({\n                mfa_token,\n                challenge_type: 'oob',\n                client_id: 'XXH9skh44KSude1nhCGM74R9TciHylrj',\n            }),\n        });\n        const data = await response.json();\n        oob_code = data.oob_code;\n        console.log(data);\n    } catch (e) {\n        enrollMFA();\n        console.log(e);\n    }\n};\n\nconst fetchPrivateApi = async (credentials) => {\n    try {\n        const data = await fetch('http://localhost:8000/api/private', {\n            headers: {\n                Authorization: `${credentials.tokenType} ${credentials.accessToken}`\n            }\n        });\n        const json = await data.json();\n        console.log(json);\n    } catch (e) {\n        console.log(e);\n    }\n};\n\nconst authenticateMFA = async (binding_code) => {\n    try {\n        const body = {\n            grant_type: 'http://auth0.com/oauth/grant-type/mfa-oob',\n            client_id: 'XXH9skh44KSude1nhCGM74R9TciHylrj',\n            mfa_token,\n            oob_code,\n            binding_code,\n        };\n        const payload = new FormData();\n        payload.append('grant_type', 'http://auth0.com/oauth/grant-type/mfa-oob');\n        payload.append('client_id', 'XXH9skh44KSude1nhCGM74R9TciHylrj');\n        payload.append('mfa_token', mfa_token);\n        payload.append('oob_code', oob_code);\n        payload.append('binding_code', binding_code);\n        const response = await fetch('https://dev-4bulwykj.auth0.com/oauth/token', {\n            method: 'POST',\n            headers: {\n                'content-type': 'application/x-www-form-urlencoded',\n                Authorization: `Bearer ${mfa_token}`,\n            },\n            body: payload,\n        });\n        const data = await response.json();\n        console.log(data);\n    } catch (e) {\n        console.log(e);\n    }\n};\n\nconst signin = (username, password) => {\n    auth0instance.client.login({\n        realm: 'Username-Password-Authentication',\n        username,\n        password,\n    }, (err, authResult) => {\n        if (err && err.code === 'mfa_required') {\n            mfa_token = err.original.response.body.mfa_token;\n            challengeMFA();\n            console.log(err);\n            return;\n        }\n        console.log(authResult);\n        fetchPrivateApi(authResult);\n    });\n};\n\nexport default signin;\nexport { authenticateMFA };\n","import React, { useState } from 'react';\nimport signin, { authenticateMFA } from './Auth';\nimport './App.css';\n\nfunction App() {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [otp, setOtp] = useState('')\n  return (\n    <div className=\"App\">\n      <input type=\"email\" value={email} onChange={e => setEmail(e.target.value)} />\n      <input type=\"password\" value={password} onChange={e => setPassword(e.target.value)} />\n      <button type=\"button\" onClick={() => signin(email, password)}>Sign In</button>\n      <br />\n      <input type=\"text\" value={otp} onChange={e => setOtp(e.target.value)} />\n      <button type=\"button\" onClick={() => authenticateMFA(otp)}>Verify OTP</button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}