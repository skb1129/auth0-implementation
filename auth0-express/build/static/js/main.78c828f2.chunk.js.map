{"version":3,"sources":["Auth.js","App.js","serviceWorker.js","index.js"],"names":["auth0instance","auth0","WebAuth","domain","clientID","audience","redirectUri","scope","responseType","fetchPrivateApi","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","credentials","data","json","wrap","_context","prev","next","fetch","headers","Authorization","concat","tokenType","accessToken","sent","console","log","t0","stop","_x","apply","this","arguments","signin","username","password","client","login","realm","err","authResult","App","_useState","useState","_useState2","slicedToArray","email","setEmail","_useState3","_useState4","setPassword","react_default","createElement","className","type","value","onChange","e","target","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oNAEMA,EAAgB,SAAIC,EAAMC,SAAQ,CACpCC,OAAQ,yBACRC,SAAU,mCACVC,SAAU,0BACVC,YAAa,wBACbC,MAAO,kDACPC,aAAc,mBAGZC,EAAe,eAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAC,EAAOC,GAAP,IAAAC,EAAAC,EAAA,OAAAN,EAAAC,EAAAM,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEGC,MAAM,oCAAqC,CAC1DC,QAAS,CACLC,cAAa,GAAAC,OAAKV,EAAYW,UAAjB,KAAAD,OAA8BV,EAAYY,gBAJ/C,cAEVX,EAFUG,EAAAS,KAAAT,EAAAE,KAAA,EAOGL,EAAKC,OAPR,OAOVA,EAPUE,EAAAS,KAQhBC,QAAQC,IAAIb,GARIE,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAY,GAAAZ,EAAA,SAUhBU,QAAQC,IAARX,EAAAY,IAVgB,yBAAAZ,EAAAa,SAAAlB,EAAA,kBAAH,gBAAAmB,GAAA,OAAAzB,EAAA0B,MAAAC,KAAAC,YAAA,GA0BNC,EAZA,SAACC,EAAUC,GACtBzC,EAAc0C,OAAOC,MAAM,CACvBC,MAAO,mCACPJ,WACAC,YACD,SAACI,EAAKC,GACLf,QAAQC,IAAIa,GACZd,QAAQC,IAAIc,GACZrC,EAAgBqC,YCjBTC,MAZf,WAAe,IAAAC,EACaC,mBAAS,IADtBC,EAAAvC,OAAAwC,EAAA,EAAAxC,CAAAqC,EAAA,GACNI,EADMF,EAAA,GACCG,EADDH,EAAA,GAAAI,EAEmBL,mBAAS,IAF5BM,EAAA5C,OAAAwC,EAAA,EAAAxC,CAAA2C,EAAA,GAENb,EAFMc,EAAA,GAEIC,EAFJD,EAAA,GAGb,OACEE,EAAA3C,EAAA4C,cAAA,OAAKC,UAAU,OACbF,EAAA3C,EAAA4C,cAAA,SAAOE,KAAK,QAAQC,MAAOT,EAAOU,SAAU,SAAAC,GAAC,OAAIV,EAASU,EAAEC,OAAOH,UACnEJ,EAAA3C,EAAA4C,cAAA,SAAOE,KAAK,WAAWC,MAAOpB,EAAUqB,SAAU,SAAAC,GAAC,OAAIP,EAAYO,EAAEC,OAAOH,UAC5EJ,EAAA3C,EAAA4C,cAAA,UAAQE,KAAK,SAASK,QAAS,kBAAM1B,EAAOa,EAAOX,KAAnD,aCCcyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAA3C,EAAA4C,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.78c828f2.chunk.js","sourcesContent":["import auth0 from 'auth0-js';\n\nconst auth0instance = new auth0.WebAuth({\n    domain: 'dev-4bulwykj.auth0.com',\n    clientID: 'XXH9skh44KSude1nhCGM74R9TciHylrj',\n    audience: 'http://10.14.2.206:8000',\n    redirectUri: 'http://localhost:8000',\n    scope: 'openid profile email address phone read:profile',\n    responseType: 'token id_token'\n});\n\nconst fetchPrivateApi = async (credentials) => {\n    try {\n        const data = await fetch('http://localhost:8000/api/private', {\n            headers: {\n                Authorization: `${credentials.tokenType} ${credentials.accessToken}`\n            }\n        });\n        const json = await data.json();\n        console.log(json);\n    } catch (e) {\n        console.log(e);\n    }\n};\n\nconst signin = (username, password) => {\n    auth0instance.client.login({\n        realm: 'Username-Password-Authentication',\n        username,\n        password,\n    }, (err, authResult) => {\n        console.log(err);\n        console.log(authResult);\n        fetchPrivateApi(authResult);\n    });\n};\n\nexport default signin;\n","import React, { useState } from 'react';\nimport signin from './Auth';\nimport './App.css';\n\nfunction App() {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  return (\n    <div className=\"App\">\n      <input type=\"email\" value={email} onChange={e => setEmail(e.target.value)} />\n      <input type=\"password\" value={password} onChange={e => setPassword(e.target.value)} />\n      <button type=\"button\" onClick={() => signin(email, password)}>Sign In</button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}